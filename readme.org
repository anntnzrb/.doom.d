#+title:  annt's Doom Configuration for GNU Emacs
#+author: anntnzrb
#+email:  anntnzrb@protonmail.com

#+language: en
#+startup:  content indent
#+options:  toc:nil author:t email:t
#+property: header-args :results silent

# macros
#+macro: export-date (eval (format-time-string "%F" (current-time)))

#+macro: emacs-version        (eval emacs-version)
#+macro: doom-version         (eval doom-version)
#+macro: doom-modules-version (eval doom-modules-version)

#+macro: system-features (eval system-configuration-features)

- Last update: *{{{export-date}}}*

- /GNU Emacs/ system details
  - version: *{{{emacs-version}}}*
  - build features: *{{{system-features}}}*

- /Doom Emacs/ details
  - version: *{{{doom-version}}}*
  - modules version: *{{{doom-modules-features}}}*

* Preamble

The following are just the headers for both to-be-generated =config.el= and
=packages.el= files.

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

** Helpers and auxiliaries

*** Environment

The following serves adding directories to the system's =PATH= that may contain
executables you want Emacs to be able to use.

Examples:

- Nix
- Rust's Cargo
- Haskell's GHCup

#+begin_src emacs-lisp :tangle no
(annt/add-exec-paths '("~/.local/scripts"))
#+end_src

#+begin_src emacs-lisp
;;;###autoload
(defun annt/add-exec-paths (paths)
  "Add each path in PATHS to the `exec-path' and 'PATH' environment variable.
   If a path is not a directory, a warning is issued."
  (dolist (path paths)
    (let ((expanded-path (expand-file-name path)))
      (if (file-directory-p expanded-path)
          (progn
            (add-to-list 'exec-path expanded-path)
            (setenv "PATH" (concat (getenv "PATH") path-separator expanded-path)))
        (warn "Warning: %s is not a directory" expanded-path)))))
#+end_src

Now, let's add [[https://github.com/jdx/mise][mise]]'s shims to =PATH= so we have the installed tools in here as well.
Tool =mise= was previously known as =rtx=.

#+begin_src emacs-lisp
(when (executable-find "mise")
 (annt/add-exec-paths '("~/.local/share/mise/shims")))
#+end_src

* ~use-package~

*NOTE*: Set this before configuring anything else that uses ~use-package~.

#+begin_src emacs-lisp
(use-package! use-package
  :config
  (setopt use-package-always-defer t)

  ;; force using the "-hook" suffix, this should be default...
  (setopt use-package-hook-name-suffix nil))
#+end_src

* Essentials

These settings are just general, they do not belong anywhere specifically or
deserve a unique section.

#+begin_src emacs-lisp
(use-package! emacs
  :config
  (setopt display-line-numbers-type 'relative))
#+end_src

#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :config
  (setopt highlight-indent-guides-method 'bitmap))
#+end_src

* Windows & Buffers

#+begin_src emacs-lisp
(use-package! emacs
  :bind
  (:map ctl-x-map
        ("C-b" . ibuffer)))
#+end_src

#+begin_src emacs-lisp
(use-package! ace-window
  :config
  (setopt aw-keys '(?q ?a ?e ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

#+begin_src emacs-lisp
(use-package! embark
  :bind
  (:map global-map
        ("C-<escape>" . embark-act)))
#+end_src

* Appearance

** Themes

| [[https://github.com/protesilaos/ef-themes][ef-themes]] | Colourful and legible themes for GNU Emacs |

#+begin_src emacs-lisp :tangle "packages.el"
(package! ef-themes)
#+end_src

#+begin_src emacs-lisp
(use-package! ef-themes
  :demand t
  :init
  (setopt doom-theme nil)

  :config
  (ef-themes-load-random 'dark))
#+end_src

** Fonts

#+begin_src emacs-lisp
(use-package! faces
  :demand t
  :config
  (add-hook! 'text-mode-hook '(variable-pitch-mode)))
#+end_src

# #+begin_src emacs-lisp
# (use-package! emacs
#   :config
#   (let* ((main-font        "Iosevka Comfy Motion")
#          (main-font-size   16)
#          (main-font-weight 'regular)

#          (variable-pitch-font        "Iosevka Comfy Duo")
#          (variable-pitch-font-size   main-font-size)
#          (variable-pitch-font-weight main-font-weight)

#          (big-font        main-font)
#          (big-font-size   (* main-font-size 2))
#          (big-font-weight main-font-weight))

#     (setopt doom-font
#             (font-spec :family main-font
#                        :size   main-font-size
#                        :weight main-font-weight))
#     (setopt doom-variable-pitch-font
#             (font-spec :family variable-pitch-font
#                        :size   variable-pitch-font-size
#                        :weight variable-pitch-font-weight))
#     (setopt doom-big-font
#             (font-spec :family big-font
#                        :size   big-font-size
#                        :weight big-font-weight))))
# #+end_src

| [[https://github.com/protesilaos/fontaine][fontaine]] | Font configurations using presets |

#+begin_src emacs-lisp :tangle "packages.el"
(package! fontaine)
#+end_src

#+begin_src emacs-lisp
(use-package! fontaine
  :demand t
  :init
  (setq-default text-scale-remap-header-line t)

  (setopt fontaine-presets
          '(;
            (iosevka-mononoki
             :default-family "mononoki"
             :variable-pitch-family "Iosevka Comfy Motion"
             :variable-pitch-weight semilight)


            ;; fallback
            (default)
            (t
             :default-family nil
             :default-weight regular
             :default-height 120

             :variable-pitch-family nil
             :variable-pitch-weight nil
             :variable-pitch-height 1.0

             :fixed-pitch-family nil
             :fixed-pitch-weight nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-height 1.0

             :bold-family nil
             :bold-weight bold
             :italic-family nil
             :italic-slant italic

             :line-spacing nil)))

  ;; Set last preset or fall back to desired style from `fontaine-presets'.
  (fontaine-set-preset (or (fontaine-restore-latest-preset) 'default))

  (add-hook! 'kill-emacs-hook        '(fontaine-store-latest-preset))
  (add-hook! 'enable-theme-functions '(fontaine-apply-current-preset)))
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package! doom-modeline
  :config
  (setopt doom-modeline-icon t)

  ;; buffer
  (setopt doom-modeline-buffer-name                    t)
  (setopt doom-modeline-buffer-encoding                t)
  (setopt doom-modeline-buffer-state-icon              t)
  (setopt doom-modeline-buffer-file-name-style         'truncate-with-project)
  (setopt doom-modeline-buffer-modification-icon       t)
  (setopt doom-modeline-highlight-modified-buffer-name t)

  (setopt doom-modeline-column-zero-based nil)
  (setopt doom-modeline-total-line-number t)

  ;; modal
  (setopt doom-modeline-modal                      t)
  (setopt doom-modeline-modal-icon                 t)
  (setopt doom-modeline-modal-modern-icon          t)
  (setopt doom-modeline-always-show-macro-register t)

  ;; modes
  (setopt doom-modeline-major-mode-icon       t)
  (setopt doom-modeline-major-mode-color-icon t)
  (setopt doom-modeline-minor-modes           nil))
#+end_src

* Programming

** Rust

#+begin_src emacs-lisp
(use-package! rustic
  :config
  (setopt rustic-format-trigger 'on-save))
#+end_src

** Nix

#+begin_src emacs-lisp
(use-package! lsp-nix
  :config
  (setopt lsp-nix-nil-formatter ["nixpkgs-fmt"]))
#+end_src

* Org

#+begin_src emacs-lisp
(use-package! org
  :bind
  (:map goto-map
        ("o" . consult-outline)))
#+end_src

* Dired

#+begin_src emacs-lisp
(use-package! dired
  :init
  (add-hook! 'dired-mode-hook '(dired-hide-details-mode hl-line-mode)))
#+end_src

* AI

| [[https://github.com/copilot-emacs/copilot.el][copilot.el]] | Unofficial Copilot plugin for Emacs  |

#+begin_src emacs-lisp :tangle "packages.el"
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src emacs-lisp
(use-package! copilot
  :bind (:map copilot-completion-map
              ("M-<tab>" . copilot-accept-completion-by-word)))
#+end_src
